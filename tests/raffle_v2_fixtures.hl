// Hashes
const admin_pkh =  PubKeyHash::new(#01234567890123456789012345678901234567890123456789000001)
const participant1_pkh = PubKeyHash::new(#01234567890123456789012345678901234567890123456789000010)
const participant2_pkh = PubKeyHash::new(#01234567890123456789012345678901234567890123456789000011)
const participant3_pkh = PubKeyHash::new(#01234567890123456789012345678901234567890123456789000012)
const participant4_pkh = PubKeyHash::new(#01234567890123456789012345678901234567890123456789000013)
const participant5_pkh = PubKeyHash::new(#01234567890123456789012345678901234567890123456789000014)

const vault_hash_bytes = #01234567890123456789012345678901234567890123456789000001
const vault_validator_hash: ValidatorHash = ValidatorHash::new(vault_hash_bytes)

func buildDatum(ticketPrice: Value, numMaxTicketsPerWallet: Int, participants: []PubKeyHash, numMaxParticipants: Int, seedHash: ByteArray, vaultPkh: ValidatorHash, deadline: Time) -> Datum {
    Datum {
        admin: admin_pkh,
        ticketPrice: ticketPrice,
        numMaxTicketsPerWallet: numMaxTicketsPerWallet,
        participants: participants,
        numMaxParticipants: numMaxParticipants,
        seedHash: seedHash,
        vaultPkh: vaultPkh,
        deadline: deadline
    }
}

// NFT
const nft_mph_bytes = #01234567890123456789012345678901234567890123456789001000
const nft_mph = MintingPolicyHash::new(nft_mph_bytes)
const nft_asset = AssetClass::new(nft_mph, "nft".encode_utf8())
const nft_value = Value::new(nft_asset, 1)

// Deadline
const deadline = Time::new(1001)
const before_deadline_time_range = TimeRange::new(Time::new(900), Time::new(1000))
const after_deadline_time_range = TimeRange::new(Time::new(1010), Time::new(1020))
const during_deadline_time_range = TimeRange::new(Time::new(999), Time::new(1002))

// Data
const raffle_new: Datum = buildDatum(Value::lovelace(5000000), 3, []PubKeyHash{}, 10, #123123, vault_validator_hash, deadline)

const raffle_p1_1_ticket: Datum = raffle_new.copy(participants: raffle_new.participants.prepend(participant1_pkh))

const raffle_p2_3_tickets: Datum = raffle_new.copy(participants: raffle_new
    .participants
    .prepend(participant2_pkh)
    .prepend(participant2_pkh)
    .prepend(participant2_pkh)
)

const raffle_full: Datum = raffle_new.copy(participants: raffle_new
    .participants
    .prepend(participant1_pkh)
    .prepend(participant1_pkh)
    .prepend(participant1_pkh)
    .prepend(participant2_pkh)
    .prepend(participant2_pkh)
    .prepend(participant2_pkh)
    .prepend(participant3_pkh)
    .prepend(participant3_pkh)
    .prepend(participant3_pkh)
    .prepend(participant4_pkh)
)

// Redeemers
const admin = Redeemer::Admin

func buildJoinRaffleRedeemer(participant: PubKeyHash, numTickets: Int) -> Redeemer { Redeemer::JoinRaffle {participant, numTickets} }

const p1_buys_1_ticket: Redeemer = buildJoinRaffleRedeemer(participant1_pkh, 1)

const p2_buys_2_tickets: Redeemer = buildJoinRaffleRedeemer(participant2_pkh, 2)

const p2_buys_1_ticket: Redeemer = buildJoinRaffleRedeemer(participant2_pkh, 1)

const p5_buys_1_ticket: Redeemer = buildJoinRaffleRedeemer(participant5_pkh, 1)

// Script Hash
const script_creds_bytes = #01234567890123456789012345678901234567890123456789000001
const script_hash: ValidatorHash = ValidatorHash::new(script_creds_bytes)
const script_tx_hash: TxId = TxId::new(#0123456789012345678901234567890123456789012345678901234567891234)

const p1_wallet_hash: TxId = TxId::new(#0123456789012345678901234567890123456789012345678901234567891239)
const p2_wallet_hash: TxId = TxId::new(#0123456789012345678901234567890123456789012345678901234567891240)
const p5_wallet_hash: TxId = TxId::new(#0123456789012345678901234567890123456789012345678901234567891245)

const tx_id: TxId = TxId::new(#0123456789012345678901234567890123456789012345678901234567891234)

const dummy_tx_output_id = TxOutputId::new(script_tx_hash, 0)

func build_tx_output(value: Value, datum: OutputDatum) -> TxOutput { 
    TxOutput::new(
        Address::new(Credential::new_validator(script_hash), Option[StakingCredential]::None)
        , value
        , datum
    )
 }

/**
 * IT's better to build inputs, whose outputs can be used for "previous" tests of the SC.
 * eg. input.output
 * Same for value and datum
 * It should be easy to build complex input
 * Autogenerate less important data, like script hashes etc.
 */
func build_tx_input(tx_output_id: TxOutputId, tx_output: TxOutput) -> TxInput { TxInput::new(tx_output_id, tx_output) }

// INPUTS
// const basic_input: TxInput = TxInput::new(dummy_tx_output_id, 
//     TxOutput::new(
//         Address::new(Credential::new_validator(script_hash), Option[StakingCredential]::None)
//         , Value::lovelace(10000000)
//         , OutputDatum::new_none()
//     )
// )
const basic_input: TxInput = build_tx_input(dummy_tx_output_id, build_tx_output(Value::lovelace(10000000), OutputDatum::new_none()))

const user_buy_ticket_input: TxInput = build_tx_input(
    TxOutputId::new(p1_wallet_hash, 0),
    build_tx_output(
        Value::lovelace(5000000),
        OutputDatum::new_none()
    )
)

const new_raffle_input: TxInput =  build_tx_input(
    dummy_tx_output_id,
    build_tx_output(
        Value::lovelace(2000000) + nft_value,
        OutputDatum::new_inline(raffle_new)
    )
)

const raffle_1_ticket_input: TxInput =  build_tx_input(
    dummy_tx_output_id,
    build_tx_output(
        Value::lovelace(7000000) + nft_value,
        OutputDatum::new_inline(raffle_p1_1_ticket)
    )
)

const raffle_3_tickets_input: TxInput =  build_tx_input(
    dummy_tx_output_id,
    build_tx_output(
        Value::lovelace(17000000) + nft_value,
        OutputDatum::new_inline(raffle_p2_3_tickets)
    )
)

const raffle_full_input: TxInput =  build_tx_input(
    dummy_tx_output_id,
    build_tx_output(
        Value::lovelace(52000000) + nft_value,
        OutputDatum::new_inline(raffle_full)
    )
)


const p1_buys_first_ticket = TxOutput::new(
    Address::new(Credential::new_validator(script_hash), Option[StakingCredential]::None)
        , Value::lovelace(7000000) + nft_value
        , OutputDatum::new_inline(raffle_new.copy(participants: raffle_new.participants.prepend(participant1_pkh)))
    )

const p2_buys_second_third_tickets_not_enough_ada = TxOutput::new(
    Address::new(Credential::new_validator(script_hash), Option[StakingCredential]::None)
        , Value::lovelace(12000000) + nft_value
        , OutputDatum::new_inline(raffle_new.copy(participants: raffle_new.participants.prepend(participant1_pkh)))
    )
    
const p2_attempts_buy_4th_ticket = TxOutput::new(
    Address::new(Credential::new_validator(script_hash), Option[StakingCredential]::None)
        , Value::lovelace(22000000) + nft_value
        , OutputDatum::new_inline(raffle_p2_3_tickets.copy(participants: raffle_p2_3_tickets.participants.prepend(participant2_pkh)))
    )

func buildScriptContext(inputs: []TxInput, ref_inputs: []TxInput, outputs: []TxOutput, signers: []PubKeyHash, time_range: TimeRange) -> ScriptContext {
    ScriptContext::new_spending(
        Tx::new(
            inputs,
            ref_inputs,
            outputs,
            Value::lovelace(160000),
            Value::ZERO,
            []DCert{},
            Map[StakingCredential]Int{},
            time_range,
            signers,
            Map[ScriptPurpose]Data{},
            Map[DatumHash]Data{}
        ),
        TxOutputId::new(tx_id, 0)
    )
}

const sc_admin_signed: ScriptContext = buildScriptContext(
    []TxInput{basic_input},
    []TxInput{},
    []TxOutput{basic_input.output},
    []PubKeyHash{admin_pkh},
    before_deadline_time_range
)

const sc_new_raffle: ScriptContext = buildScriptContext(
    []TxInput{new_raffle_input},
    []TxInput{user_buy_ticket_input},
    []TxOutput{raffle_1_ticket_input.output},
    []PubKeyHash{participant1_pkh},
    before_deadline_time_range
)


const sc_1_ticket: ScriptContext = buildScriptContext(
    []TxInput{raffle_1_ticket_input},
    []TxInput{build_tx_input(
        TxOutputId::new(p1_wallet_hash, 0),
        build_tx_output(
            Value::lovelace(5000000),
            OutputDatum::new_none()
        )
    )},
    []TxOutput{p2_buys_second_third_tickets_not_enough_ada},
    []PubKeyHash{participant2_pkh},
    before_deadline_time_range
)

const sc_3_ticket: ScriptContext = buildScriptContext(
    []TxInput{raffle_3_tickets_input},
    []TxInput{build_tx_input(
        TxOutputId::new(p2_wallet_hash, 0),
        build_tx_output(
            Value::lovelace(5000000),
            OutputDatum::new_none()
        )
    )},
    []TxOutput{p2_attempts_buy_4th_ticket},
    []PubKeyHash{participant2_pkh},
    before_deadline_time_range
)

const sc_full_ticket: ScriptContext = buildScriptContext(
    []TxInput{raffle_full_input},
    []TxInput{build_tx_input(
        TxOutputId::new(p5_wallet_hash, 0),
        build_tx_output(
            Value::lovelace(5000000),
            OutputDatum::new_none()
        )
    )},
    []TxOutput{build_tx_output(
        Value::lovelace(57000000) + nft_value,
        OutputDatum::new_inline(raffle_full.copy(participants: raffle_full.participants.prepend(participant5_pkh)))
    )},
    []PubKeyHash{participant5_pkh},
    before_deadline_time_range
)

const sc_raffle_expired_during: ScriptContext = buildScriptContext(
    []TxInput{new_raffle_input},
    []TxInput{user_buy_ticket_input},
    []TxOutput{raffle_1_ticket_input.output},
    []PubKeyHash{participant1_pkh},
    during_deadline_time_range
)

const sc_raffle_expired_after: ScriptContext = buildScriptContext(
    []TxInput{new_raffle_input},
    []TxInput{user_buy_ticket_input},
    []TxOutput{raffle_1_ticket_input.output},
    []PubKeyHash{participant1_pkh},
    after_deadline_time_range
)